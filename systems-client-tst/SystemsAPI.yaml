openapi: 3.0.3
info:
  title: Tapis Systems API
  description: The Tapis Systems API provides for management of Tapis Systems including access and transfer methods, permissions and credentials.
  version: '0.0.1'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Systems API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: systems
    description: manage systems

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
paths:

  # --- Paths for /systems -----------------------------------------------------
  '/v3/systems/healthcheck':
    get:
      tags:
        - general
      description: Health check.
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/systems/readycheck':
    get:
      tags:
        - general
      description: Ready check.
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  '/v3/systems':
    get:
      tags:
        - systems
      summary: Retrieve systems
      description: Retrieve details for systems. Use search and select query parameters to limit results.
      operationId: getSystems
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
        - name: search
          in: query
          description: Search conditions as a single query paramter. For example search=(name.like.MySys*)~(enabled.eq.true)
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystemArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - systems
      summary: Create a system
      description: Create a system using a request body. System name must be unique within a tenant and can be composed of alphanumeric characters and the following special characters [-._~]. Name must begin with an alphabetic character and can be no more than 256 characters in length. Description is optional with a maximum length of 2048 characters.'
      operationId: createSystem
      requestBody:
        required: true
        description: A JSON object specifying information for the system to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateSystem'
      responses:
        '201':
          description: System created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/search/systems':
    get:
      tags:
        - systems
      summary: Retrieve systems matching search conditions specified as query parameters
      description: Retrieve details for systems. Use query parameters to specify search conditions. For example ?owner.eq=jdoe&port.gt=1024
      operationId: searchSystemsQueryParameters
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystemArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - systems
      summary: Retrieve systems matching search conditions
      description: Retrieve details for systems. Use request body to specify SQL-like search conditions.
      operationId: searchSystemsRequestBody
      requestBody:
        required: true
        description: A JSON object specifying SQL-like search conditions as an array of strings. Strings are concatenated to form full search query.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqSearchSystems'
#          text/plain:
#            schema:
#              $ref: '#/components/schemas/ReqSearchSystemsText'
      parameters:
        - name: pretty
          in: query
          description: Pretty print the response
          schema:
            type: boolean
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystemArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/import/sgci':
    post:
      tags:
        - systems
      summary: Import an SGCI resource.
      description: Create a system based on attributes from resource in SGCI catalog. SGCI resource ID required. Optional attributes are name, description, owner, enabled, effectiveUserId, accessCredential, jobRemoteArchiveSystem, jobRemoteArchiveDir, jobCapabilities, tags, notes.
      operationId: importSGCIResource
      requestBody:
        required: true
        description: A JSON object specifying information for the system to be created from an SGCI resource.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqImportSGCIResource'
      responses:
        '201':
          description: System created through import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '409':
          description: System already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/import/sgci/{systemName}':
    patch:
      tags:
        - systems
      summary: Update a system that was imported from an SGCI resource
      description: Update attributes for a system based on an SGCI resource. SGCI resource ID required. Optional attributes are description, enabled, effectiveUserId, jobCapabilities, tags, notes.
      operationId: updateSGCIResource
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying SGCI resource ID and changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateSGCISystem'
      responses:
        '200':
          description: System updated through import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/{systemName}':
    get:
      tags:
        - systems
      summary: Retrieve system details
      description: Retrieve information for a system given the system name. Use query parameter returnCredentials=true to have effectiveUserId access credentials included in the response. Use query parameter accessMethod=<method> to override default access method.
      operationId: getSystemByName
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: returnCredentials
          in: query
          description: Highly restricted. Only certain Tapis services are authorized to get credentials.
          schema:
            type: boolean
            default: false
        - name: accessMethod
          in: query
          description: Desired access method to use when fetching credentials, default access method used if this is null.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: System found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespSystem'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - systems
      summary: Soft delete a system
      description: Soft delete a system given the system name.
      operationId: deleteSystemByName
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: System deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    patch:
      tags:
        - systems
      summary: Update a system
      description: Update attributes for a system. Attributes that may be updated are description, host, enabled, effectiveUserId, defaultAccessMethod, transferMethods, port, useProxy, proxyHost, proxyPort, jobCapabilities, tags, notes.
      operationId: updateSystem
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying changes to be applied.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqUpdateSystem'
      responses:
        '200':
          description: System updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespResourceUrl'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
  '/v3/systems/{systemName}/changeOwner/{userName}':
    post:
      tags:
        - systems
      summary: Change system owner
      description: Change owner of a system.
      operationId: changeSystemOwner
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: System owner updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespChangeCount'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /credentials ------------------------------------------------
  '/v3/systems/credential/{systemName}/user/{userName}':
    get:
      tags:
        - credentials
      summary: Retrieve system user credentials
      description: Highly restricted. Only certain Tapis services authorized. Retrieve credentials for given system and user. Use query parameter accessMethod=<method> to override default access method.
      operationId: getUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: accessMethod
          in: query
          description: Desired access method to use when fetching credentials, default access method used if not provided.
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespCredential'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - credentials
      summary: Create or update system user credentials
      description: Create or update access credentials in the Security Kernel for given system and user using a request body. Requester must be owner of the system.
      operationId: createUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying a credential.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqCreateCredential'
      responses:
        '200':
          description: Credential updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    delete:
      tags:
        - credentials
      summary: Remove system user credentials
      description: Remove credential from the Security Kernel for given system and user. Requester must be owner of the system.
      operationId: removeUserCredential
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Credential removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  # --- Paths for /perms -------------------------------------------------------
  '/v3/systems/perms/{systemName}/user/{userName}':
    get:
      tags:
        - permissions
      summary: Retrieve system user permissions
      description: Retrieve all system related permissions for a given system and user.
      operationId: getUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespNameArray'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - permissions
      summary: Create system user permissions
      description: Create permissions in the Security Kernel for a user. Requester must be owner of the system. Permissions are READ, MODIFY or ALL.
      operationId: grantUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemName}/user/{userName}/revoke':
    post:
      tags:
        - permissions
      summary: Revoke system user permissions
      description: Revoke permissions in the Security Kernel for a user. Requester must be owner of the system. Permissions are READ, MODIFY or ALL.
      operationId: revokeUserPerms
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying a list of permissions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqPerms'
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/systems/perms/{systemName}/user/{userName}/{permission}':
    delete:
      tags:
        - permissions
      summary: Revoke system user permission
      description: Revoke system user permission in the Security Kernel. Requester must be owner of the system. Permissions are READ, MODIFY or ALL.
      operationId: revokeUserPerm
      parameters:
        - name: systemName
          in: path
          required: true
          schema:
            type: string
        - name: userName
          in: path
          required: true
          schema:
            type: string
        - name: permission
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Permission revoked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
components:
  securitySchemes:
    TapisJWT:
      type: apiKey
      description: Tapis signed JWT token authentication
      name: X-Tapis-Token
      in: header
  schemas:
    # --- Model objects ------------------------------------------------------------
    TSystem:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenant:
          type: string
        name:
          type: string
        description:
          type: string
        systemType:
          type: string
          enum:
            - LINUX
            - OBJECT_STORE
        owner:
          type: string
        host:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        defaultAccessMethod:
          type: string
          enum:
            - PASSWORD
            - PKI_KEYS
            - ACCESS_KEY
            - CERT
        accessCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          type: string
        rootDir:
          type: string
        transferMethods:
          type: array
          items:
            type: string
            enum:
              - SFTP
              - S3
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
        jobCanExec:
          type: boolean
        jobLocalWorkingDir:
          type: string
        jobLocalArchiveDir:
          type: string
        jobRemoteArchiveSystem:
          type: string
        jobRemoteArchiveDir:
          type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
        importRefId:
          type: string
        deleted:
          type: boolean
        created:
          type: string
        updated:
          type: string
    Capability:
      type: object
      properties:
        category:
          type: string
          enum:
            - SCHEDULER
            - OS
            - HARDWARE
            - SOFTWARE
            - JOB
            - CONTAINER
            - MISC
            - CUSTOM
        name:
          type: string
        value:
          type: string
    Credential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        certificate:
          type: string

    # --- Request objects -----------------------------------------------------
    ReqCreateSystem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        systemType:
          type: string
          enum:
            - LINUX
            - OBJECT_STORE
        owner:
          type: string
        host:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        defaultAccessMethod:
          type: string
          enum:
            - PASSWORD
            - PKI_KEYS
            - ACCESS_KEY
            - CERT
        accessCredential:
          $ref: '#/components/schemas/Credential'
        bucketName:
          type: string
        rootDir:
          type: string
        transferMethods:
          type: array
          items:
            type: string
            enum:
              - SFTP
              - S3
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
        jobCanExec:
          type: boolean
        jobLocalWorkingDir:
          type: string
        jobLocalArchiveDir:
          type: string
        jobRemoteArchiveSystem:
          type: string
        jobRemoteArchiveDir:
          type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqUpdateSystem:
      type: object
      properties:
        description:
          type: string
        host:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        defaultAccessMethod:
          type: string
          enum:
            - PASSWORD
            - PKI_KEYS
            - ACCESS_KEY
            - CERT
        transferMethods:
          type: array
          items:
            type: string
            enum:
              - SFTP
              - S3
        port:
          type: integer
          format: int32
        useProxy:
          type: boolean
        proxyHost:
          type: string
        proxyPort:
          type: integer
          format: int32
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqImportSGCIResource:
      type: object
      required: [sgciResourceId]
      properties:
        sgciResourceId:
          type: string
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        accessCredential:
          $ref: '#/components/schemas/Credential'
        jobRemoteArchiveSystem:
          type: string
        jobRemoteArchiveDir:
          type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqUpdateSGCISystem:
      type: object
      required: [sgciResourceId]
      properties:
        sgciResourceId:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        effectiveUserId:
          type: string
        jobCapabilities:
          type: array
          items:
            $ref: '#/components/schemas/Capability'
        tags:
          type: array
          items:
            type: string
        notes:
          type: object
    ReqCreateCredential:
      type: object
      properties:
        password:
          type: string
        privateKey:
          type: string
        publicKey:
          type: string
        accessKey:
          type: string
        accessSecret:
          type: string
        certificate:
          type: string
    ReqPerms:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
    ReqSearchSystems:
      type: object
      properties:
        search:
          type: array
          items:
            type: string

    # --- Response objects ----------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
    RespNameArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultNameArray'
    ResultNameArray:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
    RespChangeCount:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultChangeCount'
    ResultChangeCount:
      type: object
      properties:
        changes:
          type: integer
          format: int32
    RespResourceUrl:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultResourceUrl'
    ResultResourceUrl:
      type: object
      properties:
        url:
          type: string

    RespSystem:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/TSystem'
    RespSystemArray:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TSystem'
    RespCredential:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/Credential'
